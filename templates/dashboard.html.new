<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Advanced Traffic Monitoring Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
  
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(to right, #1f1f1f, #292929);
      color: white;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      padding: 20px;
    }

    .navbar {
      background-color: #1f1f1f;
      padding: 1rem;
      margin-bottom: 30px;
      border-radius: 10px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .nav-list {
      list-style: none;
      display: flex;
      gap: 20px;
      justify-content: center;
      align-items: center;
    }

    .nav-item {
      display: inline-block;
      position: relative;
    }

    .nav-link {
      color: white;
      text-decoration: none;
      padding: 8px 16px;
      border-radius: 6px;
      transition: background-color 0.3s, transform 0.2s ease;
      font-weight: 500;
      display: flex;
      align-items: center;
    }
    
    .nav-link i {
      margin-right: 8px;
      transition: transform 0.3s ease;
    }
    
    .nav-link:hover {
      background-color: #333;
      transform: translateY(-2px);
    }
    
    .nav-link:hover i {
      transform: scale(1.2);
    }
    
    .nav-link.active {
      background-color: #4CAF50;
    }

    header {
      backdrop-filter: blur(10px);
      background: rgba(255, 255, 255, 0.05);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      padding: 20px 40px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      box-shadow: 0 2px 10px rgba(0,0,0,0.2);
    }

    header h1 {
      font-size: 1.5rem;
      font-weight: bold;
    }

    header nav a {
      margin-left: 20px;
      text-decoration: none;
      color: white;
      position: relative;
      transition: color 0.3s;
    }

    header nav a::after {
      content: "";
      position: absolute;
      left: 0;
      bottom: -4px;
      width: 0%;
      height: 2px;
      background: #00ff88;
      transition: width 0.3s;
    }

    header nav a:hover {
      color: #00ff88;
    }

    header nav a:hover::after {
      width: 100%;
    }

    main {
      flex: 1;
      padding: 20px 40px;
    }

    .camera-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 20px;
      margin-top: 20px;
    }

    .camera-feed {
      position: relative;
      backdrop-filter: blur(12px);
      background: rgba(255, 255, 255, 0.05);
      border-radius: 16px;
      overflow: hidden;
      border: 1px solid rgba(255, 255, 255, 0.1);
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      aspect-ratio: 16/9;
    }

    .camera-feed:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 30px rgba(0, 0, 0, 0.7);
      cursor: pointer;
    }

    .camera-label {
      position: absolute;
      top: 15px;
      left: 15px;
      background: rgba(0, 0, 0, 0.6);
      padding: 8px 14px;
      font-weight: bold;
      font-size: 0.9rem;
      border-radius: 10px;
      z-index: 2;
    }

    .camera-status {
      position: absolute;
      bottom: 15px;
      right: 15px;
      padding: 6px 12px;
      border-radius: 10px;
      background-color: rgba(0, 0, 0, 0.6);
      color: #00ff88;
      font-weight: bold;
      font-size: 0.8rem;
      z-index: 2;
    }

    .camera-feed video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      border-radius: 16px;
    }

    .controls {
      position: absolute;
      top: 15px;
      right: 15px;
      z-index: 10;
    }

    .controls button {
      background: transparent;
      border: 2px solid white;
      color: white;
      padding: 6px 10px;
      border-radius: 50%;
      font-size: 1rem;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .controls button:hover {
      background-color: #00ff88;
      color: #111;
      box-shadow: 0 0 10px #00ff88;
    }

    .alert {
      position: absolute;
      bottom: 60px;
      left: 15px;
      right: 15px;
      background: rgba(255, 0, 0, 0.9);
      padding: 12px 20px;
      border-radius: 10px;
      font-size: 0.9rem;
      font-weight: bold;
      display: none;
      animation: popIn 0.4s ease forwards;
      z-index: 3;
    }

    @keyframes popIn {
      0% {
        transform: scale(0.5);
        opacity: 0;
      }
      100% {
        transform: scale(1);
        opacity: 1;
      }
    }

    .fullscreen {
      position: fixed !important;
      top: 0;
      left: 0;
      width: 100vw !important;
      height: 100vh !important;
      z-index: 999;
    }

    footer {
      border-top: 1px solid rgba(255, 255, 255, 0.1);
      padding: 20px;
      text-align: center;
      font-size: 0.9rem;
      background: rgba(255, 255, 255, 0.05);
    }

    @media (max-width: 768px) {
      .camera-grid {
        grid-template-columns: 1fr;
      }

      header {
        flex-direction: column;
        text-align: center;
        padding: 15px;
      }

      header nav {
        margin-top: 10px;
      }

      main {
        padding: 10px;
      }

      .camera-label, .camera-status {
        font-size: 0.8rem;
      }
    }
  </style>
</head>
<body>
    <nav class="navbar">
        <ul class="nav-list">
            <li class="nav-item">
                <a href="/" class="nav-link">
                    <i>ðŸŽ¥</i> Accident Detection
                </a>
            </li>
            <li class="nav-item">
                <a href="/dashboard" class="nav-link active">
                    <i>ðŸ“º</i> Multi-Camera View
                </a>
            </li>
            <li class="nav-item">
                <a href="/crowd" class="nav-link">
                    <i>ðŸ‘¥</i> Crowd Detection
                </a>
            </li>
        </ul>
    </nav>

    <header>
        <h1>Traffic Surveillance</h1>
        <nav>
            <a href="#">Analytics</a>
            <a href="#">Reports</a>
            <a href="#">Settings</a>
        </nav>
    </header>

    <main>
        <div class="camera-grid">
            <div class="camera-feed" id="cam1">
                <div class="camera-label">CAM_01 - Main Entrance</div>
                <video id="video1" autoplay muted></video>
                <div class="camera-status">Live</div>
                <div class="controls">
                    <button onclick="toggleFullscreen('cam1')">â›¶</button>
                </div>
                <div class="alert" id="alert1"></div>
            </div>

            <div class="camera-feed" id="cam2">
                <div class="camera-label">CAM_02 - Toll Gate</div>
                <video id="video2" autoplay muted></video>
                <div class="camera-status">Live</div>
                <div class="controls">
                    <button onclick="toggleFullscreen('cam2')">â›¶</button>
                </div>
                <div class="alert" id="alert2"></div>
            </div>

            <div class="camera-feed" id="cam3">
                <div class="camera-label">CAM_03 - Highway Junction</div>
                <video id="video3" autoplay muted></video>
                <div class="camera-status">Live</div>
                <div class="controls">
                    <button onclick="toggleFullscreen('cam3')">â›¶</button>
                </div>
                <div class="alert" id="alert3"></div>
            </div>

            <div class="camera-feed" id="cam4">
                <div class="camera-label">CAM_04 - Bridge</div>
                <video id="video4" autoplay muted></video>
                <div class="camera-status">Live</div>
                <div class="controls">
                    <button onclick="toggleFullscreen('cam4')">â›¶</button>
                </div>
                <div class="alert" id="alert4"></div>
            </div>
        </div>
    </main>

    <footer>
        Â© 2025 Traffic Surveillance System. All rights reserved.
    </footer>

    <script>
        function toggleFullscreen(camId) {
            const element = document.getElementById(camId);
            if (!document.fullscreenElement) {
                element.requestFullscreen();
                element.classList.add('fullscreen');
            } else {
                document.exitFullscreen();
                document.querySelectorAll('.camera-feed').forEach(el => el.classList.remove('fullscreen'));
            }
        }

        const cameras = {
            video1: '/static/feeds/cam1.mp4',
            video2: '/static/feeds/cam2.mp4',
            video3: '/static/feeds/cam3.mp4',
            video4: '/static/feeds/cam4.mp4'
        };

        Object.entries(cameras).forEach(([videoId, source]) => {
            const video = document.getElementById(videoId);
            video.src = source;
            video.onerror = () => {
                const feed = video.parentElement;
                feed.querySelector('.camera-status').style.color = 'red';
                feed.querySelector('.camera-status').textContent = 'Offline';
            };
        });

        const ws = new WebSocket(`ws://${window.location.host}/ws`);
        ws.onmessage = function(event) {
            const data = JSON.parse(event.data);
            if (data.type === 'accident') {
                showAlert(data.camera, data.message);
            }
        };

        function showAlert(camId, message) {
            const alert = document.querySelector(`#${camId} .alert`);
            alert.textContent = message;
            alert.style.display = 'block';
            setTimeout(() => {
                alert.style.display = 'none';
            }, 5000);
        }

        let activeVideos = {};
        
        async function updateActiveVideos() {
            try {
                const response = await fetch('/get_active_videos');
                const videos = await response.json();
                
                Object.entries(videos).forEach(([camId, videoUrl]) => {
                    if (videoUrl && !activeVideos[camId]) {
                        const video = document.querySelector(`#${camId} video`);
                        video.src = videoUrl;
                        video.load();
                        activeVideos[camId] = videoUrl;
                        
                        const status = document.querySelector(`#${camId} .camera-status`);
                        status.textContent = 'Video Loaded';
                        status.style.color = '#00ff88';
                    }
                });
            } catch (error) {
                console.error('Error updating videos:', error);
            }
        }

        setInterval(updateActiveVideos, 5000);

        document.querySelectorAll('.camera-feed video').forEach(video => {
            video.addEventListener('play', () => {
                document.querySelectorAll('.camera-feed video').forEach(v => {
                    if (v !== video && v.src) {
                        v.play();
                    }
                });
            });
            
            video.addEventListener('pause', () => {
                document.querySelectorAll('.camera-feed video').forEach(v => {
                    if (v !== video && v.src) {
                        v.pause();
                    }
                });
            });
            
            video.addEventListener('seeked', () => {
                const time = video.currentTime;
                document.querySelectorAll('.camera-feed video').forEach(v => {
                    if (v !== video && v.src) {
                        v.currentTime = time;
                    }
                });
            });
        });
    </script>
</body>
</html>
